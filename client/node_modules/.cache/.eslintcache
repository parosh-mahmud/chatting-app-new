[{"E:\\chatapp\\client\\src\\index.js":"1","E:\\chatapp\\client\\src\\App.js":"2","E:\\chatapp\\client\\src\\pages\\HomePage.js":"3","E:\\chatapp\\client\\src\\pages\\ChatPage.js":"4","E:\\chatapp\\client\\src\\components\\auth\\Login.js":"5","E:\\chatapp\\client\\src\\components\\auth\\SignUp.js":"6","E:\\chatapp\\client\\src\\Context\\ChatProvider.js":"7","E:\\chatapp\\client\\src\\components\\miscellaneous\\sideDrawer.js":"8","E:\\chatapp\\client\\src\\components\\miscellaneous\\SideDrawer.js":"9","E:\\chatapp\\client\\src\\components\\miscellaneous\\MyChats.js":"10","E:\\chatapp\\client\\src\\components\\miscellaneous\\ChatBox.js":"11","E:\\chatapp\\client\\src\\components\\miscellaneous\\ProfileModal.js":"12","E:\\chatapp\\client\\src\\components\\ChatLoading.js":"13","E:\\chatapp\\client\\src\\components\\UserAvatar\\UserListItem.js":"14","E:\\chatapp\\client\\src\\config\\ChatLogics.js":"15","E:\\chatapp\\client\\src\\components\\UserAvatar\\UserBadgeItem.js":"16","E:\\chatapp\\client\\src\\components\\miscellaneous\\SingleChat.js":"17","E:\\chatapp\\client\\src\\components\\miscellaneous\\ScrollableChat.js":"18","E:\\chatapp\\client\\src\\components\\miscellaneous\\GroupChatModal.js":"19","E:\\chatapp\\client\\src\\components\\miscellaneous\\UpdateGroupChatModal.js":"20"},{"size":646,"mtime":1694843016573,"results":"21","hashOfConfig":"22"},{"size":409,"mtime":1694048139638,"results":"23","hashOfConfig":"22"},{"size":1194,"mtime":1695120229704,"results":"24","hashOfConfig":"22"},{"size":2469,"mtime":1695054425078,"results":"25","hashOfConfig":"22"},{"size":3267,"mtime":1694269157344,"results":"26","hashOfConfig":"22"},{"size":5028,"mtime":1694451765570,"results":"27","hashOfConfig":"22"},{"size":1076,"mtime":1694753318057,"results":"28","hashOfConfig":"22"},{"size":155,"mtime":1694371730803,"results":"29","hashOfConfig":"22"},{"size":6834,"mtime":1695119067953,"results":"30","hashOfConfig":"22"},{"size":3201,"mtime":1695038062470,"results":"31","hashOfConfig":"22"},{"size":808,"mtime":1695038744937,"results":"32","hashOfConfig":"22"},{"size":2057,"mtime":1694450245419,"results":"33","hashOfConfig":"22"},{"size":572,"mtime":1694527748736,"results":"34","hashOfConfig":"22"},{"size":842,"mtime":1694714856316,"results":"35","hashOfConfig":"22"},{"size":1384,"mtime":1694590311913,"results":"36","hashOfConfig":"22"},{"size":572,"mtime":1694589681517,"results":"37","hashOfConfig":"22"},{"size":6602,"mtime":1695038997564,"results":"38","hashOfConfig":"22"},{"size":1633,"mtime":1694592499300,"results":"39","hashOfConfig":"22"},{"size":5185,"mtime":1694969506832,"results":"40","hashOfConfig":"22"},{"size":8065,"mtime":1694843511620,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"kpnkgu",{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"49","messages":"50","suppressedMessages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","suppressedMessages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55"},{"filePath":"56","messages":"57","suppressedMessages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"59","messages":"60","suppressedMessages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"62","messages":"63","suppressedMessages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","suppressedMessages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","suppressedMessages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"71","messages":"72","suppressedMessages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74"},{"filePath":"75","messages":"76","suppressedMessages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","suppressedMessages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"48"},{"filePath":"82","messages":"83","suppressedMessages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"85","messages":"86","suppressedMessages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"88","messages":"89","suppressedMessages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"91","messages":"92","suppressedMessages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"94","messages":"95","suppressedMessages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97"},{"filePath":"98","messages":"99","suppressedMessages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"101","messages":"102","suppressedMessages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"104","messages":"105","suppressedMessages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107"},"E:\\chatapp\\client\\src\\index.js",[],[],"E:\\chatapp\\client\\src\\App.js",[],[],[],"E:\\chatapp\\client\\src\\pages\\HomePage.js",[],[],"E:\\chatapp\\client\\src\\pages\\ChatPage.js",["108"],[],"import { Box, Flex, useBreakpointValue } from \"@chakra-ui/react\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\nimport SideDrawer from \"../components/miscellaneous/SideDrawer\"; \r\nimport MyChats from \"../components/miscellaneous/MyChats\";\r\nimport ChatBox from \"../components/miscellaneous/ChatBox\";\r\nimport { useState } from \"react\";\r\n\r\nconst ChatPage = () => {\r\n  const { user } = ChatState();\r\n  const [fetchAgain, setFetchAgain] = useState(false);\r\n  const [showChatBox, setShowChatBox] = useState(false); // Track whether to show ChatBox\r\n  const isMobile = useBreakpointValue({ base: true, md: false });\r\n\r\n  // Function to toggle between MyChats and ChatBox views\r\n  const toggleChatView = () => {\r\n    setShowChatBox(!showChatBox);\r\n  };\r\n\r\n  // Function to open the ChatBox\r\n  const openChatBox = () => {\r\n    setShowChatBox(true);\r\n  };\r\n\r\n  return (\r\n    <div style={{ width: \"100%\" }}>\r\n      {user && <SideDrawer />} \r\n      <Flex\r\n        flexDirection={isMobile ? \"column\" : \"row\"}\r\n        justifyContent=\"space-between\"\r\n        w=\"100%\"\r\n        h=\"91.5vh\"\r\n        p=\"10px\"\r\n      >\r\n        {user && (\r\n          <>\r\n            {isMobile ? (\r\n              // Mobile view: Show MyChats or ChatBox conditionally based on state\r\n              showChatBox ? (\r\n                <ChatBox\r\n                  fetchAgain={fetchAgain}\r\n                  setFetchAgain={setFetchAgain}\r\n                  showChatBox={showChatBox}\r\n                  toggleChatView={toggleChatView}\r\n                />\r\n              ) : (\r\n                <MyChats\r\n                  fetchAgain={fetchAgain}\r\n                  setFetchAgain={setFetchAgain}\r\n                  openChatBox={openChatBox} // Pass openChatBox in mobile view\r\n                />\r\n              )\r\n            ) : (\r\n              // Desktop view: Always show both MyChats and ChatBox side by side\r\n              <>\r\n                <MyChats\r\n                  fetchAgain={fetchAgain}\r\n                  setFetchAgain={setFetchAgain}\r\n                  openChatBox={openChatBox} // Pass openChatBox in desktop view\r\n                />\r\n                <ChatBox\r\n                  fetchAgain={fetchAgain}\r\n                  setFetchAgain={setFetchAgain}\r\n                  toggleChatView={toggleChatView} // Pass toggleChatView in desktop view\r\n                />\r\n              </>\r\n            )}\r\n          </>\r\n        )}\r\n      </Flex>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatPage;\r\n","E:\\chatapp\\client\\src\\components\\auth\\Login.js",[],[],"E:\\chatapp\\client\\src\\components\\auth\\SignUp.js",[],[],"E:\\chatapp\\client\\src\\Context\\ChatProvider.js",[],[],"E:\\chatapp\\client\\src\\components\\miscellaneous\\sideDrawer.js",[],[],"E:\\chatapp\\client\\src\\components\\miscellaneous\\SideDrawer.js",["109","110"],[],"E:\\chatapp\\client\\src\\components\\miscellaneous\\MyChats.js",["111","112"],[],"import React, { useEffect, useState } from 'react';\r\nimport { ChatState } from '../../Context/ChatProvider';\r\nimport { Box, Button, Flex, Stack, Text, useToast } from '@chakra-ui/react';\r\nimport { AddIcon } from '@chakra-ui/icons';\r\nimport axios from 'axios';\r\nimport ChatLoading from '../ChatLoading';\r\nimport { getSender } from '../../config/ChatLogics';\r\nimport GroupChatModal from './GroupChatModal';\r\n\r\nconst MyChats = ({ fetchAgain, setFetchAgain, openChatBox }) => { // Pass openChatBox callback\r\n  const { user, setChats, selectedChat, setSelectedChat, chats } = ChatState();\r\n  const [loggedUser, setLoggedUser] = useState();\r\n  const toast = useToast();\r\n\r\n  const fetchChats = async () => {\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.get('/api/chat', config);\r\n      console.log(data);\r\n      setChats(data);\r\n    } catch (error) {\r\n      toast({\r\n        title: 'Error Occurred',\r\n        description: 'Failed to load chat',\r\n        status: 'error',\r\n        duration: 3000,\r\n        isClosable: true,\r\n        position: 'bottom-left',\r\n      });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    setLoggedUser(JSON.parse(localStorage.getItem(\"userInfo\")))\r\n    fetchChats();\r\n  }, [fetchAgain]);\r\n\r\n  const chat = selectedChat !== null;\r\n\r\n  const handleUserClick = () => {\r\n    openChatBox(); // Open the ChatBox when a user is clicked\r\n  };\r\n\r\n  return (\r\n    <Box\r\n      p={3}\r\n      bg=\"white\"\r\n      borderRadius=\"lg\"\r\n      borderWidth=\"1px\"\r\n      boxShadow=\"md\"\r\n      justifyContent=\"space-between\"\r\n    >\r\n      <Flex\r\n        fontSize={{ base: '24px', md: '30px' }}\r\n        fontFamily=\"Work Sans\"\r\n        borderBottom=\"1px solid gray\"\r\n        alignItems=\"center\"\r\n      >\r\n        My Chats\r\n\r\n        <GroupChatModal>\r\n          <Button\r\n            fontSize={{ base: '16px', md: '20px', lg: '24px' }}\r\n            rightIcon={<AddIcon />}\r\n            justifyContent=\"flex-end\"\r\n          >\r\n            New Group Chat\r\n          </Button>\r\n        </GroupChatModal>\r\n      </Flex>\r\n\r\n      <Flex\r\n        flexDirection=\"column\"\r\n        p={3}\r\n        bg=\"#F8F8F8\"\r\n        borderRadius=\"lg\"\r\n        overflow=\"hidden\"\r\n      >\r\n        {chats ? (\r\n          <Stack spacing={2} overflowY=\"scroll\">\r\n            {chats.map((chat) => (\r\n              <Box\r\n                onClick={() => {\r\n                  setSelectedChat(chat);\r\n                  handleUserClick(); // Handle user click to open ChatBox\r\n                }}\r\n                cursor=\"pointer\"\r\n                bg={selectedChat === chat ? '#38B2AC' : '#E8E8E8'}\r\n                color={selectedChat === chat ? 'white' : 'black'}\r\n                p={2}\r\n                borderRadius=\"lg\"\r\n                key={chat._id}\r\n              >\r\n                <Text>\r\n                  {!chat.isGroupChat\r\n                    ? getSender(loggedUser, chat.users)\r\n                    : chat.chatName}\r\n                </Text>\r\n              </Box>\r\n            ))}\r\n          </Stack>\r\n        ) : (\r\n          <ChatLoading />\r\n        )}\r\n      </Flex>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default MyChats;\r\n","E:\\chatapp\\client\\src\\components\\miscellaneous\\ChatBox.js",[],[],"E:\\chatapp\\client\\src\\components\\miscellaneous\\ProfileModal.js",["113"],[],"import { ViewIcon } from '@chakra-ui/icons';\r\nimport { Button, IconButton, Modal, ModalCloseButton, ModalContent, ModalOverlay, useDisclosure, ModalBody, ModalFooter, ModalHeader, Image, Text, Center } from '@chakra-ui/react';\r\nimport React, { useContext } from 'react';\r\nimport { ChatState } from '../../Context/ChatProvider'; // Import the ChatState context\r\n\r\nconst ProfileModal = ({ children }) => {\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const { user } = ChatState(); // Use useContext to access the user object from the ChatState context\r\n\r\n  return (\r\n    <>\r\n      {children ? (\r\n        <span onClick={onOpen}>\r\n          {children}\r\n        </span>\r\n      ) : (\r\n        <IconButton\r\n          d={{ base: 'flex' }}\r\n          icon={<ViewIcon />}\r\n          onClick={onOpen}\r\n        />\r\n      )}\r\n      <Modal size=\"lg\" isOpen={isOpen} onClose={onClose} isCentered>\r\n        <ModalOverlay />\r\n        <ModalContent height=\"410px\">\r\n          <ModalHeader\r\n            fontSize=\"40px\"\r\n            fontFamily=\"Work sans\"\r\n            d=\"flex\"\r\n            justifyContent=\"center\"\r\n            textAlign=\"center\" // Center the text horizontally\r\n          >\r\n            {user ? user.name : 'User'}\r\n          </ModalHeader>\r\n          <ModalCloseButton />\r\n          <ModalBody>\r\n            <Center flexDirection=\"column\" alignItems=\"center\">\r\n              <Image\r\n                src={user.pic}\r\n                borderRadius=\"full\"\r\n                boxSize=\"150px\"\r\n                alt={user.name}\r\n              />\r\n\r\n               <Text\r\n                fontSize=\"3xl\" \r\n                fontFamily=\"Work sans\"\r\n                padding=\"10px\"\r\n              >\r\n                Email: {user.email}\r\n              </Text>\r\n            </Center>\r\n          </ModalBody>\r\n\r\n          <ModalFooter>\r\n            <Button colorScheme='blue' mr={3} onClick={onClose}>\r\n              Close\r\n            </Button>\r\n          </ModalFooter>\r\n        </ModalContent>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ProfileModal;\r\n","E:\\chatapp\\client\\src\\components\\ChatLoading.js",[],[],"E:\\chatapp\\client\\src\\components\\UserAvatar\\UserListItem.js",[],[],"E:\\chatapp\\client\\src\\config\\ChatLogics.js",[],[],"E:\\chatapp\\client\\src\\components\\UserAvatar\\UserBadgeItem.js",[],[],"E:\\chatapp\\client\\src\\components\\miscellaneous\\SingleChat.js",["114","115"],["116","117"],"import React, { useEffect, useState } from 'react';\r\nimport { ChatState } from '../../Context/ChatProvider';\r\nimport { Flex, FormControl, IconButton, Input, Spinner, Text, useToast } from '@chakra-ui/react';\r\nimport { ArrowBackIcon } from \"@chakra-ui/icons\";\r\nimport { getSender, getSenderFull } from '../../config/ChatLogics';\r\nimport ProfileModal from './ProfileModal';\r\nimport UpdateGroupChatModal from './UpdateGroupChatModal';\r\nimport axios from 'axios';\r\nimport \"./style.css\";\r\nimport io from \"socket.io-client\";\r\nimport ScrollableChat from './ScrollableChat';\r\nvar socket, selectedChatCompare;\r\n\r\nconst ENDPOINT = 'http://localhost:5000';\r\n\r\n\r\n\r\n\r\nconst SingleChat = ({ fetchAgain, setFetchAgain,toggleChatView }) => {\r\n  const { selectedChat, setSelectedChat, user, notification, setNotification } = ChatState();\r\n  const [messages, setMessages] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [newMessage, setNewMessage] = useState(\"\");\r\n  const [socketConnected, setSocketConnected] = useState(false);\r\n  const [typing, setTyping] = useState(false);\r\n  const [istyping, setIsTyping] = useState(false);\r\n  const toast = useToast();\r\n   \r\n\r\n\r\n\r\nconst fetchMessages = async () => {\r\n    if (!selectedChat) return;\r\n\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n\r\n      setLoading(true);\r\n\r\n      const { data } = await axios.get(\r\n        `/api/message/${selectedChat._id}`,\r\n        config\r\n      );\r\n      setMessages(data);\r\n      setLoading(false);\r\n\r\n      socket.emit(\"join chat\", selectedChat._id);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: \"Failed to Load the Messages\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n    }\r\n  };\r\n  \r\n\r\n\r\n\r\nconst sendMessage = async (event) => {\r\n    if (event.key === \"Enter\" && newMessage) {\r\n      socket.emit(\"stop typing\", selectedChat._id);\r\n      try {\r\n        const config = {\r\n          headers: {\r\n            \"Content-type\": \"application/json\",\r\n            Authorization: `Bearer ${user.token}`,\r\n          },\r\n        };\r\n        setNewMessage(\"\");\r\n        const { data } = await axios.post(\r\n          \"/api/message\",\r\n          {\r\n            content: newMessage,\r\n            chatId: selectedChat,\r\n          },\r\n          config\r\n        );\r\n        socket.emit(\"new message\", data);\r\n        setMessages([...messages, data]);\r\n      } catch (error) {\r\n        toast({\r\n          title: \"Error Occured!\",\r\n          description: \"Failed to send the Message\",\r\n          status: \"error\",\r\n          duration: 5000,\r\n          isClosable: true,\r\n          position: \"bottom\",\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n\r\nuseEffect(() => {\r\n    socket = io(ENDPOINT);\r\n    socket.emit(\"setup\", user);\r\n    socket.on(\"connected\", () => setSocketConnected(true));\r\n    socket.on(\"typing\", () => setIsTyping(true));\r\n    socket.on(\"stop typing\", () => setIsTyping(false));\r\n\r\n    // eslint-disable-next-line\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    fetchMessages();\r\n\r\n    selectedChatCompare = selectedChat;\r\n    // eslint-disable-next-line\r\n  }, [selectedChat]);\r\n\r\n\r\n\r\n useEffect(() => {\r\n  socket.on(\"message received\", (newMessageReceived) => {\r\n    if (!selectedChatCompare || selectedChatCompare._id !== newMessageReceived.chat._id) {\r\n      \r\n      if(!notification.includes(newMessageReceived)){\r\n        setNotification([newMessageReceived, ...notification]);\r\n        setFetchAgain(!fetchAgain)\r\n      }\r\n\r\n    } else {\r\n      setMessages([...messages, newMessageReceived]);\r\n    }\r\n  });\r\n}, [selectedChatCompare, messages]);\r\n\r\n\r\n\r\n\r\n  const typingHandler = (e) => {\r\n\r\n  \r\n    setNewMessage(e.target.value);\r\n\r\n    \r\n\r\n    if (!typing) {\r\n      setTyping(true);\r\n      \r\n    }\r\n  };\r\n  \r\n\r\n  return (\r\n    <>\r\n      {selectedChat ? (\r\n        <Flex\r\n          flexDirection=\"column\"\r\n          alignItems=\"stretch\"\r\n          h=\"100vh\"\r\n          w=\"100%\"\r\n          overflow=\"hidden\"\r\n        >\r\n         \r\n\r\n          <Flex\r\n            fontSize={{ base: \"28px\", md: \"30px\" }}\r\n            pb={3}\r\n            px={2}\r\n            w=\"100%\"\r\n            fontFamily=\"Work sans\"\r\n            justifyContent=\"space-between\"\r\n            alignItems=\"center\"\r\n          >\r\n          <IconButton\r\n        d={{ base: \"flex\", md: \"none\" }}\r\n        icon={<ArrowBackIcon />}\r\n        onClick={() => {\r\n          toggleChatView();\r\n          setSelectedChat(\"\"); // Clear selected chat\r\n        }}\r\n      />\r\n            <Text>\r\n              {selectedChat.isGroupChat\r\n                ? selectedChat.chatName.toUpperCase()\r\n                : getSender(user, selectedChat.users)}\r\n            </Text>\r\n\r\n            <Flex alignItems=\"center\">\r\n              {/* Conditional rendering based on selectedChat type */}\r\n              {selectedChat.isGroupChat ? (\r\n                <UpdateGroupChatModal\r\n                  fetchAgain={fetchAgain}\r\n                  setFetchAgain={setFetchAgain}\r\n                  fetchMessages={fetchMessages}\r\n                />\r\n              ) : (\r\n                <ProfileModal user={getSenderFull(user, selectedChat.users)} />\r\n              )}\r\n            </Flex>\r\n          </Flex>\r\n\r\n          <Flex\r\n  d=\"flex\"\r\n  flexDir=\"column\"\r\n  justifyContent=\"flex-end\"\r\n  p={3}\r\n  bg=\"#E8E8E8\"\r\n  w=\"100%\"\r\n  h=\"450px\"\r\n  borderRadius=\"lg\"\r\n  overflowY=\"auto\"\r\n>\r\n  {loading ? (\r\n    <Spinner\r\n      size=\"xl\"\r\n      w={20}\r\n      h={20}\r\n      alignSelf=\"center\"\r\n      margin=\"auto\"\r\n    />\r\n  ) : (\r\n    <div className=\"messages\">\r\n      {/* Render the messages here */}\r\n      <ScrollableChat messages={messages} />\r\n    </div>\r\n  )}\r\n\r\n  <FormControl id=\"message-input\" isRequired mt={3}>\r\n    <div className={`typing-indicator ${istyping ? 'active' : ''}`}>\r\n      <Input\r\n        variant=\"filled\"\r\n        bg=\"#E0E0E0\"\r\n        placeholder=\"Enter a message..\"\r\n        value={newMessage}\r\n        onChange={typingHandler}\r\n        onKeyDown={(e) => {\r\n          if (e.key === 'Enter') {\r\n            sendMessage(e);\r\n          }\r\n        }}\r\n      />\r\n    </div>\r\n  </FormControl>\r\n</Flex>\r\n\r\n        </Flex>\r\n      ) : (\r\n        <Flex\r\n          d=\"flex\"\r\n          alignItems=\"center\"\r\n          justifyContent=\"center\"\r\n          h=\"100vh\"\r\n        >\r\n          <Text fontSize=\"3xl\" pb={3} fontFamily=\"Work sans\">\r\n            Click on a user to start a new conversation\r\n          </Text>\r\n        </Flex>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SingleChat;\r\n","E:\\chatapp\\client\\src\\components\\miscellaneous\\ScrollableChat.js",[],[],"E:\\chatapp\\client\\src\\components\\miscellaneous\\GroupChatModal.js",[],[],"E:\\chatapp\\client\\src\\components\\miscellaneous\\UpdateGroupChatModal.js",["118","119","120"],[],"import React, { useState } from 'react';\r\nimport { ViewIcon } from '@chakra-ui/icons';\r\nimport { Button, Icon, IconButton, Modal, ModalBody, ModalCloseButton, ModalContent, ModalFooter, ModalHeader, ModalOverlay, useDisclosure, Text, useToast, Box, FormControl, Input, Flex, Spinner } from '@chakra-ui/react';\r\n\r\nimport { ChatState } from '../../Context/ChatProvider';\r\nimport UserBadgeItem from '../UserAvatar/UserBadgeItem';\r\nimport UserListItem from '../UserAvatar/UserListItem';\r\nimport axios from 'axios';\r\n\r\nconst UpdateGroupChatModal = ({ fetchAgain, setFetchAgain, fetchMessages }) => {\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const { selectedChat, setSelectedChat, user } = ChatState();\r\n  const [groupChatName, setGroupChatName] = useState('');\r\n  const [search, setSearch] = useState('');\r\n  const [searchResult, setSearchResult] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [renameloading, setRenameLoading] = useState(false);\r\n  const toast = useToast();\r\n\r\n  const handleRemove = async (userToRemove) => {\r\n  try {\r\n    if (selectedChat.groupAdmin._id !== user._id && userToRemove._id !== user._id) {\r\n      toast({\r\n        title: \"Only admins can remove someone!\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    setLoading(true);\r\n    const config = {\r\n      headers: {\r\n        Authorization: `Bearer ${user.token}`,\r\n      },\r\n    };\r\n\r\n    const response = await axios.put(\r\n      `/api/chat/groupremove`,\r\n      {\r\n        chatId: selectedChat._id,\r\n        userId: userToRemove._id,\r\n      },\r\n      config\r\n    );\r\n\r\n    if (response.data) {\r\n      // Check if response contains data\r\n      // Set selectedChat based on whether the user is removing themselves or someone else\r\n      setSelectedChat(userToRemove._id === user._id ? null : response.data);\r\n    }\r\n\r\n    setFetchAgain(!fetchAgain);\r\n    fetchMessages();\r\n    setLoading(false);\r\n  } catch (error) {\r\n    toast({\r\n      title: \"Error Occurred!\",\r\n      description: error.response?.data?.message || \"An error occurred while removing the user.\",\r\n      status: \"error\",\r\n      duration: 5000,\r\n      isClosable: true,\r\n      position: \"bottom\",\r\n    });\r\n    setLoading(false);\r\n  }\r\n  setGroupChatName(\"\");\r\n};\r\n\r\n\r\n\r\n  const handleRename = async () => {\r\n    if (!groupChatName) return;\r\n\r\n    try {\r\n      setRenameLoading(true);\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n\r\n      const { data } = await axios.put('/api/chat/rename', {\r\n        chatId: selectedChat._id,\r\n        chatName: groupChatName,\r\n      }, config);\r\n\r\n      setSelectedChat(data);\r\n      setFetchAgain(!fetchAgain);\r\n      setRenameLoading(false);\r\n    } catch (error) {\r\n      toast({\r\n        title: 'Error Occurred!',\r\n        description: error.response.data.message,\r\n        status: 'error',\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: 'bottom',\r\n      });\r\n      setRenameLoading(false);\r\n    }\r\n    setGroupChatName('');\r\n  };\r\n\r\n  const handleSearch = async (query) => {\r\n    setSearch(query);\r\n\r\n    // Check if the query is empty\r\n    if (!query) {\r\n      setSearchResult([]); // Clear the search results\r\n      setLoading(false);\r\n      return; // Don't make an API request if the query is empty\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n\r\n      const { data } = await axios.get(`/api/user?search=${query}`, config);\r\n\r\n      setLoading(false);\r\n\r\n      // Filter the search results based on any part of the username containing the query letter\r\n      const filteredResults = data.filter((user) =>\r\n        user.name.toLowerCase().includes(query.toLowerCase())\r\n      );\r\n\r\n      setSearchResult(filteredResults);\r\n    } catch (error) {\r\n      toast({\r\n        title: 'Error Occurred!',\r\n        description: 'Failed to load the search results',\r\n        status: 'error',\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: 'bottom-left',\r\n      });\r\n\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleAddUser = async (user1) => {\r\n    if (!selectedChat || !selectedChat.users) {\r\n      // Handle the case where selectedChat or selectedChat.users is undefined\r\n      return;\r\n    }\r\n\r\n    if (selectedChat.users.find((u) => u._id === user1._id)) {\r\n      toast({\r\n        title: 'User Already in group!',\r\n        status: 'error',\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: 'bottom',\r\n      });\r\n      return;\r\n    }\r\n\r\n    if (selectedChat.groupAdmin._id !== user._id) {\r\n      toast({\r\n        title: 'Only admins can add someone!',\r\n        status: 'error',\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: 'bottom',\r\n      });\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.put(\r\n        `/api/chat/groupadd`,\r\n        {\r\n          chatId: selectedChat._id,\r\n          userId: user1._id,\r\n        },\r\n        config\r\n      );\r\n\r\n      setSelectedChat(data);\r\n      setFetchAgain(!fetchAgain);\r\n      setLoading(false);\r\n    } catch (error) {\r\n      toast({\r\n        title: 'Error Occurred!',\r\n        description: error.response.data.message,\r\n        status: 'error',\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: 'bottom',\r\n      });\r\n      setLoading(false);\r\n    }\r\n    setGroupChatName('');\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <IconButton d=\"flex\" icon={<ViewIcon />} onClick={onOpen} />\r\n\r\n      <Modal isOpen={isOpen} onClose={onClose} isCentered>\r\n        <ModalOverlay />\r\n        <ModalContent>\r\n          <ModalHeader\r\n            fontSize=\"35px\"\r\n            fontFamily=\"Work sans\"\r\n            d=\"flex\"\r\n            justifyContent=\"center\"\r\n          >\r\n            {selectedChat.chatName}\r\n          </ModalHeader>\r\n          <ModalCloseButton />\r\n          <ModalBody d=\"flex\" flexDir=\"column\" alignItems=\"center\">\r\n            <Box w=\"100%\" d=\"flex\" flexWrap=\"wrap\" pb={3}>\r\n              {selectedChat?.users?.map((u) => (\r\n                <UserBadgeItem\r\n                  key={u._id}\r\n                  user={u}\r\n                  admin={selectedChat.groupAdmin}\r\n                  handleFunction={() => handleRemove(u)}\r\n                />\r\n              ))}\r\n            </Box>\r\n            <Flex alignItems=\"center\" mb={3}>\r\n              <FormControl flex=\"1\">\r\n                <Input\r\n                  placeholder=\"Chat Name\"\r\n                  value={groupChatName}\r\n                  onChange={(e) => setGroupChatName(e.target.value)}\r\n                />\r\n              </FormControl>\r\n              <Button\r\n                variant=\"solid\"\r\n                colorScheme=\"teal\"\r\n                ml={1}\r\n                isLoading={renameloading}\r\n                onClick={handleRename}\r\n              >\r\n                Update\r\n              </Button>\r\n            </Flex>\r\n            <FormControl mb={1}>\r\n              <Input\r\n                placeholder=\"Add User to group\"\r\n                onChange={(e) => handleSearch(e.target.value)}\r\n              />\r\n            </FormControl>\r\n            {loading ? (\r\n              <Spinner size=\"lg\" />\r\n            ) : (\r\n              searchResult?.map((user) => (\r\n                <UserListItem\r\n                  key={user._id}\r\n                  user={user}\r\n                  handleFunction={() => handleAddUser(user)}\r\n                />\r\n              ))\r\n            )}\r\n          </ModalBody>\r\n\r\n          <ModalFooter>\r\n            <Button onClick={()=>handleRemove(user)} colorScheme=\"red\">\r\n              Leave Group\r\n            </Button>\r\n          </ModalFooter>\r\n        </ModalContent>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default UpdateGroupChatModal;\r\n",{"ruleId":"121","severity":1,"message":"122","line":1,"column":10,"nodeType":"123","messageId":"124","endLine":1,"endColumn":13},{"ruleId":"121","severity":1,"message":"125","line":18,"column":10,"nodeType":"123","messageId":"124","endLine":18,"endColumn":21},{"ruleId":"126","severity":1,"message":"127","line":37,"column":6,"nodeType":"128","endLine":37,"endColumn":14,"suggestions":"129"},{"ruleId":"126","severity":1,"message":"130","line":40,"column":6,"nodeType":"128","endLine":40,"endColumn":18,"suggestions":"131"},{"ruleId":"121","severity":1,"message":"132","line":42,"column":9,"nodeType":"123","messageId":"124","endLine":42,"endColumn":13},{"ruleId":"121","severity":1,"message":"133","line":3,"column":17,"nodeType":"123","messageId":"124","endLine":3,"endColumn":27},{"ruleId":"121","severity":1,"message":"134","line":24,"column":10,"nodeType":"123","messageId":"124","endLine":24,"endColumn":25},{"ruleId":"126","severity":1,"message":"135","line":134,"column":4,"nodeType":"128","endLine":134,"endColumn":35,"suggestions":"136"},{"ruleId":"126","severity":1,"message":"137","line":110,"column":6,"nodeType":"128","endLine":110,"endColumn":8,"suggestions":"138","suppressions":"139"},{"ruleId":"126","severity":1,"message":"140","line":117,"column":6,"nodeType":"128","endLine":117,"endColumn":20,"suggestions":"141","suppressions":"142"},{"ruleId":"121","severity":1,"message":"143","line":3,"column":18,"nodeType":"123","messageId":"124","endLine":3,"endColumn":22},{"ruleId":"121","severity":1,"message":"144","line":3,"column":141,"nodeType":"123","messageId":"124","endLine":3,"endColumn":145},{"ruleId":"121","severity":1,"message":"145","line":14,"column":10,"nodeType":"123","messageId":"124","endLine":14,"endColumn":16},"no-unused-vars","'Box' is defined but never used.","Identifier","unusedVar","'newMessages' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'userSearch'. Either include it or remove the dependency array.","ArrayExpression",["146"],"React Hook useEffect has a missing dependency: 'fetchChats'. Either include it or remove the dependency array.",["147"],"'chat' is assigned a value but never used.","'useContext' is defined but never used.","'socketConnected' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'fetchAgain', 'notification', 'setFetchAgain', and 'setNotification'. Either include them or remove the dependency array. Outer scope values like 'selectedChatCompare' aren't valid dependencies because mutating them doesn't re-render the component.",["148"],"React Hook useEffect has a missing dependency: 'user'. Either include it or remove the dependency array.",["149"],["150"],"React Hook useEffect has a missing dependency: 'fetchMessages'. Either include it or remove the dependency array.",["151"],["152"],"'Icon' is defined but never used.","'Text' is defined but never used.","'search' is assigned a value but never used.",{"desc":"153","fix":"154"},{"desc":"155","fix":"156"},{"desc":"157","fix":"158"},{"desc":"159","fix":"160"},{"kind":"161","justification":"162"},{"desc":"163","fix":"164"},{"kind":"161","justification":"162"},"Update the dependencies array to be: [search, userSearch]",{"range":"165","text":"166"},"Update the dependencies array to be: [fetchAgain, fetchChats]",{"range":"167","text":"168"},"Update the dependencies array to be: [messages, notification, setNotification, setFetchAgain, fetchAgain]",{"range":"169","text":"170"},"Update the dependencies array to be: [user]",{"range":"171","text":"172"},"directive","","Update the dependencies array to be: [fetchMessages, selectedChat]",{"range":"173","text":"174"},[1622,1630],"[search, userSearch]",[1306,1318],"[fetchAgain, fetchChats]",[3693,3724],"[messages, notification, setNotification, setFetchAgain, fetchAgain]",[3105,3107],"[user]",[3237,3251],"[fetchMessages, selectedChat]"]