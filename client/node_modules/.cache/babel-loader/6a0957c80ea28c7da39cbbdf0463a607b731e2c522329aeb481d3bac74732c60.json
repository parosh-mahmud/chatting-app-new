{"ast":null,"code":"var _jsxFileName = \"E:\\\\chatapp\\\\client\\\\src\\\\components\\\\auth\\\\SignUp.js\",\n  _s = $RefreshSig$();\nimport { FormControl, useToast, VStack, FormLabel, Input, InputGroup, InputRightElement, Button } from '@chakra-ui/react';\nimport axios from 'axios';\nimport React, { useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SignupPage = () => {\n  _s();\n  const [show, setShow] = useState(false);\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [confirmPassword, setConfirmPassword] = useState('');\n  const [picture, setPicture] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const toast = useToast();\n  const history = useHistory();\n  const handleClick = () => setShow(!show);\n  const postDetails = pics => {\n    setPicture(pics[0]); // Update the picture state with the selected file\n  };\n\n  const submitHandler = async () => {\n    setLoading(true);\n    if (!name || !email || !password || !confirmPassword || !picture) {\n      toast({\n        title: 'Please fill in all fields and upload your picture',\n        status: 'warning',\n        duration: 5000,\n        isClosable: true,\n        position: 'bottom'\n      });\n      setLoading(false);\n      return;\n    }\n    if (password !== confirmPassword) {\n      toast({\n        title: 'Passwords do not match',\n        status: 'error',\n        duration: 5000,\n        isClosable: true,\n        position: 'bottom'\n      });\n      setLoading(false);\n      return;\n    }\n    try {\n      // Upload image to Cloudinary\n      const data = new FormData();\n      data.append('file', picture);\n      data.append('upload_preset', 'chat-app');\n      data.append('cloud_name', 'parosh');\n      const response = await fetch('https://api.cloudinary.com/v1_1/parosh/image/upload', {\n        method: 'POST',\n        body: data\n      });\n      if (!response.ok) {\n        throw new Error('Error uploading image to Cloudinary');\n      }\n      const responseData = await response.json();\n      const imageUrl = responseData.secure_url;\n\n      // Create user on your server with the correct field name for the picture\n      const userData = {\n        name,\n        email,\n        password,\n        pic: imageUrl\n      }; // Use \"pic\" as the field name\n      const userResponse = await axios.post('/api/user', userData);\n\n      // Handle successful user creation\n      toast({\n        title: 'Account created successfully',\n        status: 'success',\n        duration: 5000,\n        isClosable: true,\n        position: 'bottom'\n      });\n      localStorage.setItem('userInfo', JSON.stringify(userResponse.data));\n      setName('');\n      setEmail('');\n      setPassword('');\n      setConfirmPassword('');\n      setPicture(null);\n      setLoading(false);\n      history.push('/chats');\n    } catch (error) {\n      console.error(error);\n      toast({\n        title: 'Error creating account',\n        description: error.message,\n        status: 'error',\n        duration: 5000,\n        isClosable: true,\n        position: 'bottom'\n      });\n      setLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(VStack, {\n    spacing: \"5px\",\n    color: \"black\",\n    children: [/*#__PURE__*/_jsxDEV(FormControl, {\n      id: \"pic\",\n      isRequired: true,\n      children: [/*#__PURE__*/_jsxDEV(FormLabel, {\n        children: \"Upload your Picture\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Input, {\n        type: \"file\",\n        p: 1.5,\n        accept: \"image/jpeg, image/png\",\n        onChange: e => postDetails(e.target.files)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      colorScheme: \"blue\",\n      width: \"100%\",\n      style: {\n        marginTop: 15\n      },\n      onClick: submitHandler,\n      isLoading: loading,\n      children: \"Signup\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 106,\n    columnNumber: 5\n  }, this);\n};\n_s(SignupPage, \"+qoB/8EgLzcI+Saa3HLjs11XhNE=\", false, function () {\n  return [useToast, useHistory];\n});\n_c = SignupPage;\nexport default SignupPage;\nvar _c;\n$RefreshReg$(_c, \"SignupPage\");","map":{"version":3,"names":["FormControl","useToast","VStack","FormLabel","Input","InputGroup","InputRightElement","Button","axios","React","useState","useHistory","jsxDEV","_jsxDEV","SignupPage","_s","show","setShow","name","setName","email","setEmail","password","setPassword","confirmPassword","setConfirmPassword","picture","setPicture","loading","setLoading","toast","history","handleClick","postDetails","pics","submitHandler","title","status","duration","isClosable","position","data","FormData","append","response","fetch","method","body","ok","Error","responseData","json","imageUrl","secure_url","userData","pic","userResponse","post","localStorage","setItem","JSON","stringify","push","error","console","description","message","spacing","color","children","id","isRequired","fileName","_jsxFileName","lineNumber","columnNumber","type","p","accept","onChange","e","target","files","colorScheme","width","style","marginTop","onClick","isLoading","_c","$RefreshReg$"],"sources":["E:/chatapp/client/src/components/auth/SignUp.js"],"sourcesContent":["import { FormControl, useToast, VStack, FormLabel, Input, InputGroup, InputRightElement, Button } from '@chakra-ui/react';\r\nimport axios from 'axios';\r\nimport React, { useState } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nconst SignupPage = () => {\r\n  const [show, setShow] = useState(false);\r\n  const [name, setName] = useState('');\r\n  const [email, setEmail] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const [confirmPassword, setConfirmPassword] = useState('');\r\n  const [picture, setPicture] = useState(null);\r\n  const [loading, setLoading] = useState(false);\r\n  const toast = useToast();\r\n  const history = useHistory();\r\n\r\n  const handleClick = () => setShow(!show);\r\n\r\n  const postDetails = (pics) => {\r\n    setPicture(pics[0]); // Update the picture state with the selected file\r\n  };\r\n\r\n  const submitHandler = async () => {\r\n    setLoading(true);\r\n    \r\n    if (!name || !email || !password || !confirmPassword || !picture) {\r\n      toast({\r\n        title: 'Please fill in all fields and upload your picture',\r\n        status: 'warning',\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: 'bottom',\r\n      });\r\n      setLoading(false);\r\n      return;\r\n    }\r\n    \r\n    if (password !== confirmPassword) {\r\n      toast({\r\n        title: 'Passwords do not match',\r\n        status: 'error',\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: 'bottom',\r\n      });\r\n      setLoading(false);\r\n      return;\r\n    }\r\n\r\n    try {\r\n      // Upload image to Cloudinary\r\n      const data = new FormData();\r\n      data.append('file', picture);\r\n      data.append('upload_preset', 'chat-app');\r\n      data.append('cloud_name', 'parosh');\r\n      const response = await fetch(\r\n        'https://api.cloudinary.com/v1_1/parosh/image/upload',\r\n        {\r\n          method: 'POST',\r\n          body: data,\r\n        }\r\n      );\r\n      if (!response.ok) {\r\n        throw new Error('Error uploading image to Cloudinary');\r\n      }\r\n      const responseData = await response.json();\r\n      const imageUrl = responseData.secure_url;\r\n\r\n      // Create user on your server with the correct field name for the picture\r\n      const userData = { name, email, password, pic: imageUrl }; // Use \"pic\" as the field name\r\n      const userResponse = await axios.post('/api/user', userData);\r\n\r\n      // Handle successful user creation\r\n      toast({\r\n        title: 'Account created successfully',\r\n        status: 'success',\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: 'bottom',\r\n      });\r\n\r\n      localStorage.setItem('userInfo', JSON.stringify(userResponse.data));\r\n      \r\n      setName('');\r\n      setEmail('');\r\n      setPassword('');\r\n      setConfirmPassword('');\r\n      setPicture(null);\r\n      setLoading(false);\r\n      history.push('/chats');\r\n    } catch (error) {\r\n      console.error(error);\r\n      toast({\r\n        title: 'Error creating account',\r\n        description: error.message,\r\n        status: 'error',\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: 'bottom',\r\n      });\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <VStack spacing=\"5px\" color=\"black\">\r\n      {/* ... (Rest of the form fields remain the same) */}\r\n      <FormControl id=\"pic\" isRequired>\r\n        <FormLabel>Upload your Picture</FormLabel>\r\n        <Input\r\n          type=\"file\"\r\n          p={1.5}\r\n          accept=\"image/jpeg, image/png\"\r\n          onChange={(e) => postDetails(e.target.files)}\r\n        />\r\n      </FormControl>\r\n      <Button\r\n        colorScheme=\"blue\"\r\n        width=\"100%\"\r\n        style={{ marginTop: 15 }}\r\n        onClick={submitHandler}\r\n        isLoading={loading}\r\n      >\r\n        Signup\r\n      </Button>\r\n    </VStack>\r\n  );\r\n};\r\n\r\nexport default SignupPage;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}