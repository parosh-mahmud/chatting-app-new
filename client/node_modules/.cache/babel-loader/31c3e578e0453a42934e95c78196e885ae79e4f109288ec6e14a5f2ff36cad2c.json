{"ast":null,"code":"var _jsxFileName = \"E:\\\\chatapp\\\\client\\\\src\\\\components\\\\miscellaneous\\\\SingleChat.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { ChatState } from '../../Context/ChatProvider';\nimport { Flex, FormControl, IconButton, Input, Spinner, Text, useToast } from '@chakra-ui/react';\nimport { ArrowBackIcon } from \"@chakra-ui/icons\";\nimport { getSender, getSenderFull } from '../../config/ChatLogics';\nimport ProfileModal from './ProfileModal';\nimport UpdateGroupChatModal from './UpdateGroupChatModal';\nimport axios from 'axios';\nimport io from \"socket.io-client\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst SingleChat = ({\n  fetchAgain,\n  setFetchAgain\n}) => {\n  _s();\n  const {\n    selectedChat,\n    setSelectedChat,\n    user\n  } = ChatState();\n  const [messages, setMessages] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [newMessage, setNewMessage] = useState(\"\");\n  const [socketConnected, setSocketConnected] = useState(false);\n  const [typing, setTyping] = useState(false);\n  const [istyping, setIsTyping] = useState(false);\n  const toast = useToast();\n  let socket;\n  useEffect(() => {\n    // Initialize and connect the socket when the component mounts\n    socket = io(\"your_socket_server_url_here\");\n    socket.on(\"connect\", () => {\n      setSocketConnected(true);\n\n      // Event listeners for typing indicators\n      socket.on(\"typing\", chatId => {\n        if (selectedChat._id === chatId) {\n          setIsTyping(true);\n        }\n      });\n      socket.on(\"stop typing\", chatId => {\n        if (selectedChat._id === chatId) {\n          setIsTyping(false);\n        }\n      });\n    });\n\n    // Clean up socket connection when the component unmounts\n    return () => {\n      socket.disconnect();\n    };\n  }, [selectedChat]);\n  const sendMessage = async () => {\n    if (newMessage) {\n      try {\n        const config = {\n          headers: {\n            \"Content-type\": \"application/json\",\n            Authorization: `Bearer ${user.token}`\n          }\n        };\n        const {\n          data\n        } = await axios.post(\"/api/message\", {\n          content: newMessage,\n          chatId: selectedChat._id\n        }, config);\n        socket.emit(\"new message\", data);\n        setNewMessage(\"\");\n        setMessages([...messages, data]);\n      } catch (error) {\n        toast({\n          title: \"Error Occurred!\",\n          description: \"Failed to send the Message\",\n          status: \"error\",\n          duration: 5000,\n          isClosable: true,\n          position: \"bottom\"\n        });\n      }\n    }\n  };\n  const typingHandler = e => {\n    setNewMessage(e.target.value);\n    if (!socketConnected) return;\n    if (!typing) {\n      setTyping(true);\n      socket.emit('typing', selectedChat._id);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: selectedChat ? /*#__PURE__*/_jsxDEV(Flex, {\n      flexDirection: \"column\",\n      alignItems: \"stretch\",\n      h: \"100vh\",\n      w: \"100%\",\n      overflow: \"hidden\",\n      children: [/*#__PURE__*/_jsxDEV(Flex, {\n        fontSize: {\n          base: \"28px\",\n          md: \"30px\"\n        },\n        pb: 3,\n        px: 2,\n        w: \"100%\",\n        fontFamily: \"Work sans\",\n        justifyContent: \"space-between\",\n        alignItems: \"center\",\n        children: [/*#__PURE__*/_jsxDEV(IconButton, {\n          d: {\n            base: \"flex\",\n            md: \"none\"\n          },\n          icon: /*#__PURE__*/_jsxDEV(ArrowBackIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 21\n          }, this),\n          onClick: () => setSelectedChat(\"\")\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Text, {\n          children: selectedChat.isGroupChat ? selectedChat.chatName.toUpperCase() : getSender(user, selectedChat.users)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Flex, {\n          alignItems: \"center\",\n          children: selectedChat.isGroupChat ? /*#__PURE__*/_jsxDEV(UpdateGroupChatModal, {\n            fetchAgain: fetchAgain,\n            setFetchAgain: setFetchAgain\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 17\n          }, this) : /*#__PURE__*/_jsxDEV(ProfileModal, {\n            user: getSenderFull(user, selectedChat.users)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 132,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Flex, {\n        d: \"flex\",\n        flexDir: \"column\",\n        justifyContent: \"flex-end\",\n        p: 3,\n        bg: \"#E8E8E8\",\n        w: \"100%\",\n        h: \"450px\",\n        borderRadius: \"lg\",\n        overflowY: \"auto\",\n        children: [loading ? /*#__PURE__*/_jsxDEV(Spinner, {\n          size: \"xl\",\n          w: 20,\n          h: 20,\n          alignSelf: \"center\",\n          margin: \"auto\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 15\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"messages\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n          id: \"first-name\",\n          isRequired: true,\n          mt: 3,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `typing-indicator ${istyping ? 'active' : ''}`,\n            children: /*#__PURE__*/_jsxDEV(Input, {\n              variant: \"filled\",\n              bg: \"#E0E0E0\",\n              placeholder: \"Enter a message..\",\n              value: newMessage,\n              onChange: typingHandler,\n              onKeyDown: e => {\n                if (e.key === \"Enter\") {\n                  sendMessage();\n                }\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 164,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 163,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(Flex, {\n      d: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      h: \"100vh\",\n      children: /*#__PURE__*/_jsxDEV(Text, {\n        fontSize: \"3xl\",\n        pb: 3,\n        fontFamily: \"Work sans\",\n        children: \"Click on a user to start a new conversation\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n};\n_s(SingleChat, \"z7g2rS5s63Grb2dpJ5f/fxXKymA=\", false, function () {\n  return [useToast];\n});\n_c = SingleChat;\nexport default SingleChat;\nvar _c;\n$RefreshReg$(_c, \"SingleChat\");","map":{"version":3,"names":["React","useState","useEffect","ChatState","Flex","FormControl","IconButton","Input","Spinner","Text","useToast","ArrowBackIcon","getSender","getSenderFull","ProfileModal","UpdateGroupChatModal","axios","io","jsxDEV","_jsxDEV","Fragment","_Fragment","SingleChat","fetchAgain","setFetchAgain","_s","selectedChat","setSelectedChat","user","messages","setMessages","loading","setLoading","newMessage","setNewMessage","socketConnected","setSocketConnected","typing","setTyping","istyping","setIsTyping","toast","socket","on","chatId","_id","disconnect","sendMessage","config","headers","Authorization","token","data","post","content","emit","error","title","description","status","duration","isClosable","position","typingHandler","e","target","value","children","flexDirection","alignItems","h","w","overflow","fontSize","base","md","pb","px","fontFamily","justifyContent","d","icon","fileName","_jsxFileName","lineNumber","columnNumber","onClick","isGroupChat","chatName","toUpperCase","users","flexDir","p","bg","borderRadius","overflowY","size","alignSelf","margin","className","id","isRequired","mt","variant","placeholder","onChange","onKeyDown","key","_c","$RefreshReg$"],"sources":["E:/chatapp/client/src/components/miscellaneous/SingleChat.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { ChatState } from '../../Context/ChatProvider';\r\nimport { Flex, FormControl, IconButton, Input, Spinner, Text, useToast } from '@chakra-ui/react';\r\nimport { ArrowBackIcon } from \"@chakra-ui/icons\";\r\nimport { getSender, getSenderFull } from '../../config/ChatLogics';\r\nimport ProfileModal from './ProfileModal';\r\nimport UpdateGroupChatModal from './UpdateGroupChatModal';\r\nimport axios from 'axios';\r\nimport io from \"socket.io-client\";\r\n\r\n\r\nconst SingleChat = ({ fetchAgain, setFetchAgain }) => {\r\n  const { selectedChat, setSelectedChat, user } = ChatState();\r\n  const [messages, setMessages] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [newMessage, setNewMessage] = useState(\"\");\r\n  const [socketConnected, setSocketConnected] = useState(false);\r\n  const [typing, setTyping] = useState(false);\r\n  const [istyping, setIsTyping] = useState(false);\r\n  const toast = useToast();\r\n  let socket;\r\n\r\n  useEffect(() => {\r\n    // Initialize and connect the socket when the component mounts\r\n    socket = io(\"your_socket_server_url_here\");\r\n    socket.on(\"connect\", () => {\r\n      setSocketConnected(true);\r\n\r\n      // Event listeners for typing indicators\r\n      socket.on(\"typing\", (chatId) => {\r\n        if (selectedChat._id === chatId) {\r\n          setIsTyping(true);\r\n        }\r\n      });\r\n\r\n      socket.on(\"stop typing\", (chatId) => {\r\n        if (selectedChat._id === chatId) {\r\n          setIsTyping(false);\r\n        }\r\n      });\r\n    });\r\n\r\n    // Clean up socket connection when the component unmounts\r\n    return () => {\r\n      socket.disconnect();\r\n    };\r\n  }, [selectedChat]);\r\n\r\n  const sendMessage = async () => {\r\n    if (newMessage) {\r\n      try {\r\n        const config = {\r\n          headers: {\r\n            \"Content-type\": \"application/json\",\r\n            Authorization: `Bearer ${user.token}`,\r\n          },\r\n        };\r\n\r\n        const { data } = await axios.post(\r\n          \"/api/message\",\r\n          {\r\n            content: newMessage,\r\n            chatId: selectedChat._id,\r\n          },\r\n          config\r\n        );\r\n\r\n        socket.emit(\"new message\", data);\r\n        setNewMessage(\"\");\r\n        setMessages([...messages, data]);\r\n      } catch (error) {\r\n        toast({\r\n          title: \"Error Occurred!\",\r\n          description: \"Failed to send the Message\",\r\n          status: \"error\",\r\n          duration: 5000,\r\n          isClosable: true,\r\n          position: \"bottom\",\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  const typingHandler = (e) => {\r\n    setNewMessage(e.target.value);\r\n\r\n    if (!socketConnected) return;\r\n\r\n    if (!typing) {\r\n      setTyping(true);\r\n      socket.emit('typing', selectedChat._id);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {selectedChat ? (\r\n        <Flex\r\n          flexDirection=\"column\"\r\n          alignItems=\"stretch\"\r\n          h=\"100vh\"\r\n          w=\"100%\"\r\n          overflow=\"hidden\"\r\n        >\r\n          <Flex\r\n            fontSize={{ base: \"28px\", md: \"30px\" }}\r\n            pb={3}\r\n            px={2}\r\n            w=\"100%\"\r\n            fontFamily=\"Work sans\"\r\n            justifyContent=\"space-between\"\r\n            alignItems=\"center\"\r\n          >\r\n            <IconButton\r\n              d={{ base: \"flex\", md: \"none\" }}\r\n              icon={<ArrowBackIcon />}\r\n              onClick={() => setSelectedChat(\"\")}\r\n            />\r\n            <Text>\r\n              {selectedChat.isGroupChat\r\n                ? selectedChat.chatName.toUpperCase()\r\n                : getSender(user, selectedChat.users)}\r\n            </Text>\r\n\r\n            <Flex alignItems=\"center\">\r\n              {selectedChat.isGroupChat ? (\r\n                <UpdateGroupChatModal\r\n                  fetchAgain={fetchAgain}\r\n                  setFetchAgain={setFetchAgain}\r\n                />\r\n              ) : (\r\n                <ProfileModal user={getSenderFull(user, selectedChat.users)} />\r\n              )}\r\n            </Flex>\r\n          </Flex>\r\n\r\n          <Flex\r\n            d=\"flex\"\r\n            flexDir=\"column\"\r\n            justifyContent=\"flex-end\"\r\n            p={3}\r\n            bg=\"#E8E8E8\"\r\n            w=\"100%\"\r\n            h=\"450px\"\r\n            borderRadius=\"lg\"\r\n            overflowY=\"auto\"\r\n          >\r\n            {loading ? (\r\n              <Spinner\r\n                size=\"xl\"\r\n                w={20}\r\n                h={20}\r\n                alignSelf=\"center\"\r\n                margin=\"auto\"\r\n              />\r\n            ) : (\r\n              <div className=\"messages\">\r\n                {/* Render messages here */}\r\n              </div>\r\n            )}\r\n\r\n            <FormControl id=\"first-name\" isRequired mt={3}>\r\n              <div className={`typing-indicator ${istyping ? 'active' : ''}`}>\r\n                <Input\r\n                  variant=\"filled\"\r\n                  bg=\"#E0E0E0\"\r\n                  placeholder=\"Enter a message..\"\r\n                  value={newMessage}\r\n                  onChange={typingHandler}\r\n                  onKeyDown={(e) => {\r\n                    if (e.key === \"Enter\") {\r\n                      sendMessage();\r\n                    }\r\n                  }}\r\n                />\r\n              </div>\r\n            </FormControl>\r\n          </Flex>\r\n        </Flex>\r\n      ) : (\r\n        <Flex\r\n          d=\"flex\"\r\n          alignItems=\"center\"\r\n          justifyContent=\"center\"\r\n          h=\"100vh\"\r\n        >\r\n          <Text fontSize=\"3xl\" pb={3} fontFamily=\"Work sans\">\r\n            Click on a user to start a new conversation\r\n          </Text>\r\n        </Flex>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SingleChat;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}