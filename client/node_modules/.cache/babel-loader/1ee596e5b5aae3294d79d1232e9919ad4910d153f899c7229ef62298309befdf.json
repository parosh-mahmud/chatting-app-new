{"ast":null,"code":"\n\n// import { FormControl } from \"@chakra-ui/form-control\";\n// import { Input } from \"@chakra-ui/input\";\n// import { Box, Text } from \"@chakra-ui/layout\";\n// import \"./style.css\"\n// import { IconButton, Spinner, useToast,Flex } from \"@chakra-ui/react\";\n\n// import { getSender,getSenderFull } from \"../../config/ChatLogics\";\n// import { useEffect, useState } from \"react\";\n// import axios from \"axios\";\n// import { ArrowBackIcon } from \"@chakra-ui/icons\";\n// import ProfileModal from \"./ProfileModal\";\n// import ScrollableChat from \"./ScrollableChat\";\n\n// import animationData from \"../../animations/typing.json\";\n\n// import io from \"socket.io-client\";\n// import UpdateGroupChatModal from \"../miscellaneous/UpdateGroupChatModal\";\n// import { ChatState } from \"../../Context/ChatProvider\";\n// const ENDPOINT = \"http://localhost:5000\"; // \"https://talk-a-tive.herokuapp.com\"; -> After deployment\n// var socket, selectedChatCompare;\n\n// const SingleChat = ({ fetchAgain, setFetchAgain }) => {\n//   const [messages, setMessages] = useState([]);\n//   const [loading, setLoading] = useState(false);\n//   const [newMessage, setNewMessage] = useState(\"\");\n//   const [socketConnected, setSocketConnected] = useState(false);\n//   const [typing, setTyping] = useState(false);\n//   const [istyping, setIsTyping] = useState(false);\n//   const toast = useToast();\n\n//   const defaultOptions = {\n//     loop: true,\n//     autoplay: true,\n//     animationData: animationData,\n//     rendererSettings: {\n//       preserveAspectRatio: \"xMidYMid slice\",\n//     },\n//   };\n//   const { selectedChat, setSelectedChat, user, notification, setNotification } =\n//     ChatState();\n\n//   const fetchMessages = async () => {\n//     if (!selectedChat) return;\n\n//     try {\n//       const config = {\n//         headers: {\n//           Authorization: `Bearer ${user.token}`,\n//         },\n//       };\n\n//       setLoading(true);\n\n//       const { data } = await axios.get(\n//         `/api/message/${selectedChat._id}`,\n//         config\n//       );\n//       setMessages(data);\n//       setLoading(false);\n\n//       socket.emit(\"join chat\", selectedChat._id);\n//     } catch (error) {\n//       toast({\n//         title: \"Error Occured!\",\n//         description: \"Failed to Load the Messages\",\n//         status: \"error\",\n//         duration: 5000,\n//         isClosable: true,\n//         position: \"bottom\",\n//       });\n//     }\n//   };\n\n//   const sendMessage = async (event) => {\n//     if (event.key === \"Enter\" && newMessage) {\n//       socket.emit(\"stop typing\", selectedChat._id);\n//       try {\n//         const config = {\n//           headers: {\n//             \"Content-type\": \"application/json\",\n//             Authorization: `Bearer ${user.token}`,\n//           },\n//         };\n//         setNewMessage(\"\");\n//         const { data } = await axios.post(\n//           \"/api/message\",\n//           {\n//             content: newMessage,\n//             chatId: selectedChat,\n//           },\n//           config\n//         );\n//         socket.emit(\"new message\", data);\n//         setMessages([...messages, data]);\n//       } catch (error) {\n//         toast({\n//           title: \"Error Occured!\",\n//           description: \"Failed to send the Message\",\n//           status: \"error\",\n//           duration: 5000,\n//           isClosable: true,\n//           position: \"bottom\",\n//         });\n//       }\n//     }\n//   };\n\n//   useEffect(() => {\n//     socket = io(ENDPOINT);\n//     socket.emit(\"setup\", user);\n//     socket.on(\"connected\", () => setSocketConnected(true));\n//     socket.on(\"typing\", () => setIsTyping(true));\n//     socket.on(\"stop typing\", () => setIsTyping(false));\n\n//     // eslint-disable-next-line\n//   }, []);\n\n//   useEffect(() => {\n//     fetchMessages();\n\n//     selectedChatCompare = selectedChat;\n//     // eslint-disable-next-line\n//   }, [selectedChat]);\n\n//   useEffect(() => {\n//     socket.on(\"message recieved\", (newMessageRecieved) => {\n//       if (\n//         !selectedChatCompare || // if chat is not selected or doesn't match current chat\n//         selectedChatCompare._id !== newMessageRecieved.chat._id\n//       ) {\n//         if (!notification.includes(newMessageRecieved)) {\n//           setNotification([newMessageRecieved, ...notification]);\n//           setFetchAgain(!fetchAgain);\n//         }\n//       } else {\n//         setMessages([...messages, newMessageRecieved]);\n//       }\n//     });\n//   });\n\n//   const typingHandler = (e) => {\n//     setNewMessage(e.target.value);\n\n//     if (!socketConnected) return;\n\n//     if (!typing) {\n//       setTyping(true);\n//       socket.emit(\"typing\", selectedChat._id);\n//     }\n//     let lastTypingTime = new Date().getTime();\n//     var timerLength = 3000;\n//     setTimeout(() => {\n//       var timeNow = new Date().getTime();\n//       var timeDiff = timeNow - lastTypingTime;\n//       if (timeDiff >= timerLength && typing) {\n//         socket.emit(\"stop typing\", selectedChat._id);\n//         setTyping(false);\n//       }\n//     }, timerLength);\n//   };\n\n//   return (\n//     <>\n//       {selectedChat ? (\n//         <>\n//           <Text\n//   fontSize={{ base: \"28px\", md: \"30px\" }}\n//   pb={3}\n//   px={2}\n//   w=\"100%\"\n//   fontFamily=\"Work sans\"\n//   d=\"flex\"\n//   alignItems=\"center\"\n//   justifyContent=\"space-between\" // Apply justifyContent here\n// >\n//   <div style={{ display: \"flex\", alignItems: \"center\" }}>\n//     <IconButton\n//       d={{ base: \"flex\", md: \"none\" }}\n//       icon={<ArrowBackIcon />}\n//       onClick={() => setSelectedChat(\"\")}\n//     />\n//     {messages && (\n//       <div style={{ display: \"flex\", alignItems: \"center\" }}>\n//         {!selectedChat.isGroupChat ? (\n//           <>\n//             {getSender(user, selectedChat.users)}\n//             <ProfileModal\n//               user={getSenderFull(user, selectedChat.users)}\n//             />\n//           </>\n//         ) : (\n//           <>\n//             {selectedChat.chatName.toUpperCase()}\n//             <UpdateGroupChatModal\n//               fetchMessages={fetchMessages}\n//               fetchAgain={fetchAgain}\n//               setFetchAgain={setFetchAgain}\n//             />\n//           </>\n//         )}\n//       </div>\n//     )}\n//   </div>\n// </Text>\n\n//           <Box\n//             d=\"flex\"\n//             flexDir=\"column\"\n//             justifyContent=\"flex-end\"\n//             p={3}\n//             bg=\"#E8E8E8\"\n//             w=\"100%\"\n//             h=\"100%\"\n//             borderRadius=\"lg\"\n//             overflowY=\"hidden\"\n//           >\n//             {loading ? (\n//               <Spinner\n//                 size=\"xl\"\n//                 w={20}\n//                 h={20}\n//                 alignSelf=\"center\"\n//                 margin=\"auto\"\n//               />\n//             ) : (\n//               <div className=\"messages\">\n//                 <ScrollableChat messages={messages} />\n//               </div>\n//             )}\n\n//            <FormControl\n//         onKeyDown={sendMessage}\n//         id=\"first-name\"\n//         isRequired\n//         mt={3}\n//       >\n//         {istyping ? (\n//           <div className=\"typing-animation\">Typing...</div>\n//         ) : (\n//           <></>\n//         )}\n//         <Input\n//           variant=\"filled\"\n//           bg=\"#E0E0E0\"\n//           placeholder=\"Enter a message..\"\n//           value={newMessage}\n//           onChange={typingHandler}\n//         />\n//       </FormControl>\n//           </Box>\n//         </>\n//       ) : (\n//         // to get socket.io on same page\n//         <Flex d=\"flex\" alignItems=\"center\" justifyContent=\"center\" h=\"100%\">\n//           <Text fontSize=\"3xl\" pb={3} fontFamily=\"Work sans\">\n//             Click on a user to start chatting\n//           </Text>\n//         </Flex>\n//       )}\n//     </>\n//   );\n// };\n\n// export default SingleChat;","map":{"version":3,"names":[],"sources":["E:/chatapp/client/src/components/miscellaneous/SingleChat.js"],"sourcesContent":["\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// import { FormControl } from \"@chakra-ui/form-control\";\r\n// import { Input } from \"@chakra-ui/input\";\r\n// import { Box, Text } from \"@chakra-ui/layout\";\r\n// import \"./style.css\"\r\n// import { IconButton, Spinner, useToast,Flex } from \"@chakra-ui/react\";\r\n\r\n// import { getSender,getSenderFull } from \"../../config/ChatLogics\";\r\n// import { useEffect, useState } from \"react\";\r\n// import axios from \"axios\";\r\n// import { ArrowBackIcon } from \"@chakra-ui/icons\";\r\n// import ProfileModal from \"./ProfileModal\";\r\n// import ScrollableChat from \"./ScrollableChat\";\r\n\r\n// import animationData from \"../../animations/typing.json\";\r\n\r\n// import io from \"socket.io-client\";\r\n// import UpdateGroupChatModal from \"../miscellaneous/UpdateGroupChatModal\";\r\n// import { ChatState } from \"../../Context/ChatProvider\";\r\n// const ENDPOINT = \"http://localhost:5000\"; // \"https://talk-a-tive.herokuapp.com\"; -> After deployment\r\n// var socket, selectedChatCompare;\r\n\r\n// const SingleChat = ({ fetchAgain, setFetchAgain }) => {\r\n//   const [messages, setMessages] = useState([]);\r\n//   const [loading, setLoading] = useState(false);\r\n//   const [newMessage, setNewMessage] = useState(\"\");\r\n//   const [socketConnected, setSocketConnected] = useState(false);\r\n//   const [typing, setTyping] = useState(false);\r\n//   const [istyping, setIsTyping] = useState(false);\r\n//   const toast = useToast();\r\n\r\n//   const defaultOptions = {\r\n//     loop: true,\r\n//     autoplay: true,\r\n//     animationData: animationData,\r\n//     rendererSettings: {\r\n//       preserveAspectRatio: \"xMidYMid slice\",\r\n//     },\r\n//   };\r\n//   const { selectedChat, setSelectedChat, user, notification, setNotification } =\r\n//     ChatState();\r\n\r\n//   const fetchMessages = async () => {\r\n//     if (!selectedChat) return;\r\n\r\n//     try {\r\n//       const config = {\r\n//         headers: {\r\n//           Authorization: `Bearer ${user.token}`,\r\n//         },\r\n//       };\r\n\r\n//       setLoading(true);\r\n\r\n//       const { data } = await axios.get(\r\n//         `/api/message/${selectedChat._id}`,\r\n//         config\r\n//       );\r\n//       setMessages(data);\r\n//       setLoading(false);\r\n\r\n//       socket.emit(\"join chat\", selectedChat._id);\r\n//     } catch (error) {\r\n//       toast({\r\n//         title: \"Error Occured!\",\r\n//         description: \"Failed to Load the Messages\",\r\n//         status: \"error\",\r\n//         duration: 5000,\r\n//         isClosable: true,\r\n//         position: \"bottom\",\r\n//       });\r\n//     }\r\n//   };\r\n\r\n//   const sendMessage = async (event) => {\r\n//     if (event.key === \"Enter\" && newMessage) {\r\n//       socket.emit(\"stop typing\", selectedChat._id);\r\n//       try {\r\n//         const config = {\r\n//           headers: {\r\n//             \"Content-type\": \"application/json\",\r\n//             Authorization: `Bearer ${user.token}`,\r\n//           },\r\n//         };\r\n//         setNewMessage(\"\");\r\n//         const { data } = await axios.post(\r\n//           \"/api/message\",\r\n//           {\r\n//             content: newMessage,\r\n//             chatId: selectedChat,\r\n//           },\r\n//           config\r\n//         );\r\n//         socket.emit(\"new message\", data);\r\n//         setMessages([...messages, data]);\r\n//       } catch (error) {\r\n//         toast({\r\n//           title: \"Error Occured!\",\r\n//           description: \"Failed to send the Message\",\r\n//           status: \"error\",\r\n//           duration: 5000,\r\n//           isClosable: true,\r\n//           position: \"bottom\",\r\n//         });\r\n//       }\r\n//     }\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     socket = io(ENDPOINT);\r\n//     socket.emit(\"setup\", user);\r\n//     socket.on(\"connected\", () => setSocketConnected(true));\r\n//     socket.on(\"typing\", () => setIsTyping(true));\r\n//     socket.on(\"stop typing\", () => setIsTyping(false));\r\n\r\n//     // eslint-disable-next-line\r\n//   }, []);\r\n\r\n//   useEffect(() => {\r\n//     fetchMessages();\r\n\r\n//     selectedChatCompare = selectedChat;\r\n//     // eslint-disable-next-line\r\n//   }, [selectedChat]);\r\n\r\n//   useEffect(() => {\r\n//     socket.on(\"message recieved\", (newMessageRecieved) => {\r\n//       if (\r\n//         !selectedChatCompare || // if chat is not selected or doesn't match current chat\r\n//         selectedChatCompare._id !== newMessageRecieved.chat._id\r\n//       ) {\r\n//         if (!notification.includes(newMessageRecieved)) {\r\n//           setNotification([newMessageRecieved, ...notification]);\r\n//           setFetchAgain(!fetchAgain);\r\n//         }\r\n//       } else {\r\n//         setMessages([...messages, newMessageRecieved]);\r\n//       }\r\n//     });\r\n//   });\r\n\r\n//   const typingHandler = (e) => {\r\n//     setNewMessage(e.target.value);\r\n\r\n//     if (!socketConnected) return;\r\n\r\n//     if (!typing) {\r\n//       setTyping(true);\r\n//       socket.emit(\"typing\", selectedChat._id);\r\n//     }\r\n//     let lastTypingTime = new Date().getTime();\r\n//     var timerLength = 3000;\r\n//     setTimeout(() => {\r\n//       var timeNow = new Date().getTime();\r\n//       var timeDiff = timeNow - lastTypingTime;\r\n//       if (timeDiff >= timerLength && typing) {\r\n//         socket.emit(\"stop typing\", selectedChat._id);\r\n//         setTyping(false);\r\n//       }\r\n//     }, timerLength);\r\n//   };\r\n\r\n//   return (\r\n//     <>\r\n//       {selectedChat ? (\r\n//         <>\r\n//           <Text\r\n//   fontSize={{ base: \"28px\", md: \"30px\" }}\r\n//   pb={3}\r\n//   px={2}\r\n//   w=\"100%\"\r\n//   fontFamily=\"Work sans\"\r\n//   d=\"flex\"\r\n//   alignItems=\"center\"\r\n//   justifyContent=\"space-between\" // Apply justifyContent here\r\n// >\r\n//   <div style={{ display: \"flex\", alignItems: \"center\" }}>\r\n//     <IconButton\r\n//       d={{ base: \"flex\", md: \"none\" }}\r\n//       icon={<ArrowBackIcon />}\r\n//       onClick={() => setSelectedChat(\"\")}\r\n//     />\r\n//     {messages && (\r\n//       <div style={{ display: \"flex\", alignItems: \"center\" }}>\r\n//         {!selectedChat.isGroupChat ? (\r\n//           <>\r\n//             {getSender(user, selectedChat.users)}\r\n//             <ProfileModal\r\n//               user={getSenderFull(user, selectedChat.users)}\r\n//             />\r\n//           </>\r\n//         ) : (\r\n//           <>\r\n//             {selectedChat.chatName.toUpperCase()}\r\n//             <UpdateGroupChatModal\r\n//               fetchMessages={fetchMessages}\r\n//               fetchAgain={fetchAgain}\r\n//               setFetchAgain={setFetchAgain}\r\n//             />\r\n//           </>\r\n//         )}\r\n//       </div>\r\n//     )}\r\n//   </div>\r\n// </Text>\r\n\r\n\r\n//           <Box\r\n//             d=\"flex\"\r\n//             flexDir=\"column\"\r\n//             justifyContent=\"flex-end\"\r\n//             p={3}\r\n//             bg=\"#E8E8E8\"\r\n//             w=\"100%\"\r\n//             h=\"100%\"\r\n//             borderRadius=\"lg\"\r\n//             overflowY=\"hidden\"\r\n//           >\r\n//             {loading ? (\r\n//               <Spinner\r\n//                 size=\"xl\"\r\n//                 w={20}\r\n//                 h={20}\r\n//                 alignSelf=\"center\"\r\n//                 margin=\"auto\"\r\n//               />\r\n//             ) : (\r\n//               <div className=\"messages\">\r\n//                 <ScrollableChat messages={messages} />\r\n//               </div>\r\n//             )}\r\n\r\n//            <FormControl\r\n//         onKeyDown={sendMessage}\r\n//         id=\"first-name\"\r\n//         isRequired\r\n//         mt={3}\r\n//       >\r\n//         {istyping ? (\r\n//           <div className=\"typing-animation\">Typing...</div>\r\n//         ) : (\r\n//           <></>\r\n//         )}\r\n//         <Input\r\n//           variant=\"filled\"\r\n//           bg=\"#E0E0E0\"\r\n//           placeholder=\"Enter a message..\"\r\n//           value={newMessage}\r\n//           onChange={typingHandler}\r\n//         />\r\n//       </FormControl>\r\n//           </Box>\r\n//         </>\r\n//       ) : (\r\n//         // to get socket.io on same page\r\n//         <Flex d=\"flex\" alignItems=\"center\" justifyContent=\"center\" h=\"100%\">\r\n//           <Text fontSize=\"3xl\" pb={3} fontFamily=\"Work sans\">\r\n//             Click on a user to start chatting\r\n//           </Text>\r\n//         </Flex>\r\n//       )}\r\n//     </>\r\n//   );\r\n// };\r\n\r\n// export default SingleChat;"],"mappings":";;AAi},"metadata":{},"sourceType":"module","externalDependencies":[]}