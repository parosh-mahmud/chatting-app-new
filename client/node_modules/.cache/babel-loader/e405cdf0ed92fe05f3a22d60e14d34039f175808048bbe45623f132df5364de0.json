{"ast":null,"code":"var _jsxFileName = \"E:\\\\chatapp\\\\client\\\\src\\\\components\\\\miscellaneous\\\\SingleChat.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { ChatState } from '../../Context/ChatProvider';\nimport { Flex, FormControl, IconButton, Input, Spinner, Text, useToast } from '@chakra-ui/react';\nimport { ArrowBackIcon } from \"@chakra-ui/icons\";\nimport { getSender, getSenderFull } from '../../config/ChatLogics';\nimport ProfileModal from './ProfileModal';\nimport UpdateGroupChatModal from './UpdateGroupChatModal';\nimport axios from 'axios';\nimport \"./style.css\";\nimport io from \"socket.io-client\";\nimport ScrollableChat from './ScrollableChat';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nvar socket, selectedChatCompare;\nconst ENDPOINT = 'http://localhost:5000';\nconst SingleChat = ({\n  fetchAgain,\n  setFetchAgain,\n  toggleChatView\n}) => {\n  _s();\n  const {\n    selectedChat,\n    setSelectedChat,\n    user,\n    notification,\n    setNotification\n  } = ChatState();\n  const [messages, setMessages] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [newMessage, setNewMessage] = useState(\"\");\n  const [socketConnected, setSocketConnected] = useState(false);\n  const [typing, setTyping] = useState(false);\n  const [istyping, setIsTyping] = useState(false);\n  const toast = useToast();\n  const fetchMessages = async () => {\n    if (!selectedChat) return;\n    try {\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`\n        }\n      };\n      setLoading(true);\n      const {\n        data\n      } = await axios.get(`/api/message/${selectedChat._id}`, config);\n      setMessages(data);\n      setLoading(false);\n      socket.emit(\"join chat\", selectedChat._id);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the Messages\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\"\n      });\n    }\n  };\n  const sendMessage = async event => {\n    if (event.key === \"Enter\" && newMessage) {\n      socket.emit(\"stop typing\", selectedChat._id);\n      try {\n        const config = {\n          headers: {\n            \"Content-type\": \"application/json\",\n            Authorization: `Bearer ${user.token}`\n          }\n        };\n        setNewMessage(\"\");\n        const {\n          data\n        } = await axios.post(\"/api/message\", {\n          content: newMessage,\n          chatId: selectedChat\n        }, config);\n        socket.emit(\"new message\", data);\n        setMessages([...messages, data]);\n      } catch (error) {\n        toast({\n          title: \"Error Occured!\",\n          description: \"Failed to send the Message\",\n          status: \"error\",\n          duration: 5000,\n          isClosable: true,\n          position: \"bottom\"\n        });\n      }\n    }\n  };\n  useEffect(() => {\n    socket = io(ENDPOINT);\n    socket.emit(\"setup\", user);\n    socket.on(\"connected\", () => setSocketConnected(true));\n    socket.on(\"typing\", () => setIsTyping(true));\n    socket.on(\"stop typing\", () => setIsTyping(false));\n\n    // eslint-disable-next-line\n  }, []);\n  useEffect(() => {\n    fetchMessages();\n    selectedChatCompare = selectedChat;\n    // eslint-disable-next-line\n  }, [selectedChat]);\n  useEffect(() => {\n    socket.on(\"message received\", newMessageReceived => {\n      if (!selectedChatCompare || selectedChatCompare._id !== newMessageReceived.chat._id) {\n        if (!notification.includes(newMessageReceived)) {\n          setNotification([newMessageReceived, ...notification]);\n          setFetchAgain(!fetchAgain);\n        }\n      } else {\n        setMessages([...messages, newMessageReceived]);\n      }\n    });\n  }, [selectedChatCompare, messages]);\n  const typingHandler = e => {\n    setNewMessage(e.target.value);\n    if (!typing) {\n      setTyping(true);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: selectedChat ? /*#__PURE__*/_jsxDEV(Flex, {\n      flexDirection: \"column\",\n      alignItems: \"stretch\",\n      h: \"100vh\",\n      w: \"100%\",\n      overflow: \"hidden\",\n      children: [/*#__PURE__*/_jsxDEV(Flex, {\n        fontSize: {\n          base: \"28px\",\n          md: \"30px\"\n        },\n        pb: 3,\n        px: 2,\n        w: \"100%\",\n        fontFamily: \"Work sans\",\n        justifyContent: \"space-between\",\n        alignItems: \"center\",\n        children: [/*#__PURE__*/_jsxDEV(IconButton, {\n          d: {\n            base: \"flex\",\n            md: \"none\"\n          },\n          icon: /*#__PURE__*/_jsxDEV(ArrowBackIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 176,\n            columnNumber: 21\n          }, this),\n          onClick: () => setSelectedChat(\"\")\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Text, {\n          children: selectedChat.isGroupChat ? selectedChat.chatName.toUpperCase() : getSender(user, selectedChat.users)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Flex, {\n          alignItems: \"center\",\n          children: selectedChat.isGroupChat ? /*#__PURE__*/_jsxDEV(UpdateGroupChatModal, {\n            fetchAgain: fetchAgain,\n            setFetchAgain: setFetchAgain,\n            fetchMessages: fetchMessages\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 188,\n            columnNumber: 17\n          }, this) : /*#__PURE__*/_jsxDEV(ProfileModal, {\n            user: getSenderFull(user, selectedChat.users)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 194,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Flex, {\n        d: \"flex\",\n        flexDir: \"column\",\n        justifyContent: \"flex-end\",\n        p: 3,\n        bg: \"#E8E8E8\",\n        w: \"100%\",\n        h: \"450px\",\n        borderRadius: \"lg\",\n        overflowY: \"auto\",\n        children: [loading ? /*#__PURE__*/_jsxDEV(Spinner, {\n          size: \"xl\",\n          w: 20,\n          h: 20,\n          alignSelf: \"center\",\n          margin: \"auto\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 5\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"messages\",\n          children: /*#__PURE__*/_jsxDEV(ScrollableChat, {\n            messages: messages\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 221,\n            columnNumber: 7\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 219,\n          columnNumber: 5\n        }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n          id: \"message-input\",\n          isRequired: true,\n          mt: 3,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `typing-indicator ${istyping ? 'active' : ''}`,\n            children: /*#__PURE__*/_jsxDEV(Input, {\n              variant: \"filled\",\n              bg: \"#E0E0E0\",\n              placeholder: \"Enter a message..\",\n              value: newMessage,\n              onChange: typingHandler,\n              onKeyDown: e => {\n                if (e.key === 'Enter') {\n                  sendMessage(e);\n                }\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 227,\n              columnNumber: 7\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 226,\n            columnNumber: 5\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 3\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(Flex, {\n      d: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      h: \"100vh\",\n      children: /*#__PURE__*/_jsxDEV(Text, {\n        fontSize: \"3xl\",\n        pb: 3,\n        fontFamily: \"Work sans\",\n        children: \"Click on a user to start a new conversation\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 245,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n};\n_s(SingleChat, \"J0/5w4jPVqRx8QfTCSBBWdq70n4=\", false, function () {\n  return [useToast];\n});\n_c = SingleChat;\nexport default SingleChat;\nvar _c;\n$RefreshReg$(_c, \"SingleChat\");","map":{"version":3,"names":["React","useEffect","useState","ChatState","Flex","FormControl","IconButton","Input","Spinner","Text","useToast","ArrowBackIcon","getSender","getSenderFull","ProfileModal","UpdateGroupChatModal","axios","io","ScrollableChat","jsxDEV","_jsxDEV","Fragment","_Fragment","socket","selectedChatCompare","ENDPOINT","SingleChat","fetchAgain","setFetchAgain","toggleChatView","_s","selectedChat","setSelectedChat","user","notification","setNotification","messages","setMessages","loading","setLoading","newMessage","setNewMessage","socketConnected","setSocketConnected","typing","setTyping","istyping","setIsTyping","toast","fetchMessages","config","headers","Authorization","token","data","get","_id","emit","error","title","description","status","duration","isClosable","position","sendMessage","event","key","post","content","chatId","on","newMessageReceived","chat","includes","typingHandler","e","target","value","children","flexDirection","alignItems","h","w","overflow","fontSize","base","md","pb","px","fontFamily","justifyContent","d","icon","fileName","_jsxFileName","lineNumber","columnNumber","onClick","isGroupChat","chatName","toUpperCase","users","flexDir","p","bg","borderRadius","overflowY","size","alignSelf","margin","className","id","isRequired","mt","variant","placeholder","onChange","onKeyDown","_c","$RefreshReg$"],"sources":["E:/chatapp/client/src/components/miscellaneous/SingleChat.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { ChatState } from '../../Context/ChatProvider';\r\nimport { Flex, FormControl, IconButton, Input, Spinner, Text, useToast } from '@chakra-ui/react';\r\nimport { ArrowBackIcon } from \"@chakra-ui/icons\";\r\nimport { getSender, getSenderFull } from '../../config/ChatLogics';\r\nimport ProfileModal from './ProfileModal';\r\nimport UpdateGroupChatModal from './UpdateGroupChatModal';\r\nimport axios from 'axios';\r\nimport \"./style.css\";\r\nimport io from \"socket.io-client\";\r\nimport ScrollableChat from './ScrollableChat';\r\nvar socket, selectedChatCompare;\r\n\r\nconst ENDPOINT = 'http://localhost:5000';\r\n\r\n\r\n\r\n\r\nconst SingleChat = ({ fetchAgain, setFetchAgain,toggleChatView }) => {\r\n  const { selectedChat, setSelectedChat, user, notification, setNotification } = ChatState();\r\n  const [messages, setMessages] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [newMessage, setNewMessage] = useState(\"\");\r\n  const [socketConnected, setSocketConnected] = useState(false);\r\n  const [typing, setTyping] = useState(false);\r\n  const [istyping, setIsTyping] = useState(false);\r\n  const toast = useToast();\r\n   \r\n\r\n\r\n\r\nconst fetchMessages = async () => {\r\n    if (!selectedChat) return;\r\n\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n\r\n      setLoading(true);\r\n\r\n      const { data } = await axios.get(\r\n        `/api/message/${selectedChat._id}`,\r\n        config\r\n      );\r\n      setMessages(data);\r\n      setLoading(false);\r\n\r\n      socket.emit(\"join chat\", selectedChat._id);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: \"Failed to Load the Messages\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n    }\r\n  };\r\n  \r\n\r\n\r\n\r\nconst sendMessage = async (event) => {\r\n    if (event.key === \"Enter\" && newMessage) {\r\n      socket.emit(\"stop typing\", selectedChat._id);\r\n      try {\r\n        const config = {\r\n          headers: {\r\n            \"Content-type\": \"application/json\",\r\n            Authorization: `Bearer ${user.token}`,\r\n          },\r\n        };\r\n        setNewMessage(\"\");\r\n        const { data } = await axios.post(\r\n          \"/api/message\",\r\n          {\r\n            content: newMessage,\r\n            chatId: selectedChat,\r\n          },\r\n          config\r\n        );\r\n        socket.emit(\"new message\", data);\r\n        setMessages([...messages, data]);\r\n      } catch (error) {\r\n        toast({\r\n          title: \"Error Occured!\",\r\n          description: \"Failed to send the Message\",\r\n          status: \"error\",\r\n          duration: 5000,\r\n          isClosable: true,\r\n          position: \"bottom\",\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n\r\nuseEffect(() => {\r\n    socket = io(ENDPOINT);\r\n    socket.emit(\"setup\", user);\r\n    socket.on(\"connected\", () => setSocketConnected(true));\r\n    socket.on(\"typing\", () => setIsTyping(true));\r\n    socket.on(\"stop typing\", () => setIsTyping(false));\r\n\r\n    // eslint-disable-next-line\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    fetchMessages();\r\n\r\n    selectedChatCompare = selectedChat;\r\n    // eslint-disable-next-line\r\n  }, [selectedChat]);\r\n\r\n\r\n\r\n useEffect(() => {\r\n  socket.on(\"message received\", (newMessageReceived) => {\r\n    if (!selectedChatCompare || selectedChatCompare._id !== newMessageReceived.chat._id) {\r\n      \r\n      if(!notification.includes(newMessageReceived)){\r\n        setNotification([newMessageReceived, ...notification]);\r\n        setFetchAgain(!fetchAgain)\r\n      }\r\n\r\n    } else {\r\n      setMessages([...messages, newMessageReceived]);\r\n    }\r\n  });\r\n}, [selectedChatCompare, messages]);\r\n\r\n\r\n\r\n\r\n  const typingHandler = (e) => {\r\n\r\n  \r\n    setNewMessage(e.target.value);\r\n\r\n    \r\n\r\n    if (!typing) {\r\n      setTyping(true);\r\n      \r\n    }\r\n  };\r\n  \r\n\r\n  return (\r\n    <>\r\n      {selectedChat ? (\r\n        <Flex\r\n          flexDirection=\"column\"\r\n          alignItems=\"stretch\"\r\n          h=\"100vh\"\r\n          w=\"100%\"\r\n          overflow=\"hidden\"\r\n        >\r\n         \r\n\r\n          <Flex\r\n            fontSize={{ base: \"28px\", md: \"30px\" }}\r\n            pb={3}\r\n            px={2}\r\n            w=\"100%\"\r\n            fontFamily=\"Work sans\"\r\n            justifyContent=\"space-between\"\r\n            alignItems=\"center\"\r\n          >\r\n            <IconButton\r\n              d={{ base: \"flex\", md: \"none\" }}\r\n              icon={<ArrowBackIcon />}\r\n              onClick={() => setSelectedChat(\"\")}\r\n            />\r\n            <Text>\r\n              {selectedChat.isGroupChat\r\n                ? selectedChat.chatName.toUpperCase()\r\n                : getSender(user, selectedChat.users)}\r\n            </Text>\r\n\r\n            <Flex alignItems=\"center\">\r\n              {/* Conditional rendering based on selectedChat type */}\r\n              {selectedChat.isGroupChat ? (\r\n                <UpdateGroupChatModal\r\n                  fetchAgain={fetchAgain}\r\n                  setFetchAgain={setFetchAgain}\r\n                  fetchMessages={fetchMessages}\r\n                />\r\n              ) : (\r\n                <ProfileModal user={getSenderFull(user, selectedChat.users)} />\r\n              )}\r\n            </Flex>\r\n          </Flex>\r\n\r\n          <Flex\r\n  d=\"flex\"\r\n  flexDir=\"column\"\r\n  justifyContent=\"flex-end\"\r\n  p={3}\r\n  bg=\"#E8E8E8\"\r\n  w=\"100%\"\r\n  h=\"450px\"\r\n  borderRadius=\"lg\"\r\n  overflowY=\"auto\"\r\n>\r\n  {loading ? (\r\n    <Spinner\r\n      size=\"xl\"\r\n      w={20}\r\n      h={20}\r\n      alignSelf=\"center\"\r\n      margin=\"auto\"\r\n    />\r\n  ) : (\r\n    <div className=\"messages\">\r\n      {/* Render the messages here */}\r\n      <ScrollableChat messages={messages} />\r\n    </div>\r\n  )}\r\n\r\n  <FormControl id=\"message-input\" isRequired mt={3}>\r\n    <div className={`typing-indicator ${istyping ? 'active' : ''}`}>\r\n      <Input\r\n        variant=\"filled\"\r\n        bg=\"#E0E0E0\"\r\n        placeholder=\"Enter a message..\"\r\n        value={newMessage}\r\n        onChange={typingHandler}\r\n        onKeyDown={(e) => {\r\n          if (e.key === 'Enter') {\r\n            sendMessage(e);\r\n          }\r\n        }}\r\n      />\r\n    </div>\r\n  </FormControl>\r\n</Flex>\r\n\r\n        </Flex>\r\n      ) : (\r\n        <Flex\r\n          d=\"flex\"\r\n          alignItems=\"center\"\r\n          justifyContent=\"center\"\r\n          h=\"100vh\"\r\n        >\r\n          <Text fontSize=\"3xl\" pb={3} fontFamily=\"Work sans\">\r\n            Click on a user to start a new conversation\r\n          </Text>\r\n        </Flex>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SingleChat;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}