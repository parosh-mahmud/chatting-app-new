{"ast":null,"code":"import { indexOfId } from './get-by-id.mjs';\nvar getValueText = function getValueText(item) {\n  var _ref, _item$dataset$valuete;\n  return (_ref = (_item$dataset$valuete = item.dataset.valuetext) !== null && _item$dataset$valuete !== void 0 ? _item$dataset$valuete : item.textContent) !== null && _ref !== void 0 ? _ref : \"\";\n};\nvar match = function match(valueText, query) {\n  return valueText.toLowerCase().startsWith(query.toLowerCase());\n};\nvar wrap = function wrap(v, idx) {\n  return v.map(function (_, index) {\n    return v[(Math.max(idx, 0) + index) % v.length];\n  });\n};\nfunction getByText(v, text, currentId) {\n  var index = currentId ? indexOfId(v, currentId) : -1;\n  var items = currentId ? wrap(v, index) : v;\n  var isSingleKey = text.length === 1;\n  if (isSingleKey) {\n    items = items.filter(function (item) {\n      return item.id !== currentId;\n    });\n  }\n  return items.find(function (item) {\n    return match(getValueText(item), text);\n  });\n}\nexport { getByText };","map":{"version":3,"names":["indexOfId","getValueText","item","_ref","_item$dataset$valuete","dataset","valuetext","textContent","match","valueText","query","toLowerCase","startsWith","wrap","v","idx","map","_","index","Math","max","length","getByText","text","currentId","items","isSingleKey","filter","id","find"],"sources":["E:/chatapp/client/node_modules/@zag-js/dom-query/dist/get-by-text.mjs"],"sourcesContent":["import { indexOfId } from './get-by-id.mjs';\n\nconst getValueText = (item) => item.dataset.valuetext ?? item.textContent ?? \"\";\nconst match = (valueText, query) => valueText.toLowerCase().startsWith(query.toLowerCase());\nconst wrap = (v, idx) => {\n  return v.map((_, index) => v[(Math.max(idx, 0) + index) % v.length]);\n};\nfunction getByText(v, text, currentId) {\n  const index = currentId ? indexOfId(v, currentId) : -1;\n  let items = currentId ? wrap(v, index) : v;\n  const isSingleKey = text.length === 1;\n  if (isSingleKey) {\n    items = items.filter((item) => item.id !== currentId);\n  }\n  return items.find((item) => match(getValueText(item), text));\n}\n\nexport { getByText };\n"],"mappings":"AAAA,SAASA,SAAS,QAAQ,iBAAiB;AAE3C,IAAMC,YAAY,GAAG,SAAfA,YAAYA,CAAIC,IAAI;EAAA,IAAAC,IAAA,EAAAC,qBAAA;EAAA,QAAAD,IAAA,IAAAC,qBAAA,GAAKF,IAAI,CAACG,OAAO,CAACC,SAAS,cAAAF,qBAAA,cAAAA,qBAAA,GAAIF,IAAI,CAACK,WAAW,cAAAJ,IAAA,cAAAA,IAAA,GAAI,EAAE;AAAA;AAC/E,IAAMK,KAAK,GAAG,SAARA,KAAKA,CAAIC,SAAS,EAAEC,KAAK;EAAA,OAAKD,SAAS,CAACE,WAAW,CAAC,CAAC,CAACC,UAAU,CAACF,KAAK,CAACC,WAAW,CAAC,CAAC,CAAC;AAAA;AAC3F,IAAME,IAAI,GAAG,SAAPA,IAAIA,CAAIC,CAAC,EAAEC,GAAG,EAAK;EACvB,OAAOD,CAAC,CAACE,GAAG,CAAC,UAACC,CAAC,EAAEC,KAAK;IAAA,OAAKJ,CAAC,CAAC,CAACK,IAAI,CAACC,GAAG,CAACL,GAAG,EAAE,CAAC,CAAC,GAAGG,KAAK,IAAIJ,CAAC,CAACO,MAAM,CAAC;EAAA,EAAC;AACtE,CAAC;AACD,SAASC,SAASA,CAACR,CAAC,EAAES,IAAI,EAAEC,SAAS,EAAE;EACrC,IAAMN,KAAK,GAAGM,SAAS,GAAGxB,SAAS,CAACc,CAAC,EAAEU,SAAS,CAAC,GAAG,CAAC,CAAC;EACtD,IAAIC,KAAK,GAAGD,SAAS,GAAGX,IAAI,CAACC,CAAC,EAAEI,KAAK,CAAC,GAAGJ,CAAC;EAC1C,IAAMY,WAAW,GAAGH,IAAI,CAACF,MAAM,KAAK,CAAC;EACrC,IAAIK,WAAW,EAAE;IACfD,KAAK,GAAGA,KAAK,CAACE,MAAM,CAAC,UAACzB,IAAI;MAAA,OAAKA,IAAI,CAAC0B,EAAE,KAAKJ,SAAS;IAAA,EAAC;EACvD;EACA,OAAOC,KAAK,CAACI,IAAI,CAAC,UAAC3B,IAAI;IAAA,OAAKM,KAAK,CAACP,YAAY,CAACC,IAAI,CAAC,EAAEqB,IAAI,CAAC;EAAA,EAAC;AAC9D;AAEA,SAASD,SAAS"},"metadata":{},"sourceType":"module","externalDependencies":[]}